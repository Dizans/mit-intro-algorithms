PS 4 Solutions

1:
a: 3 - addition is commutative, so changing the order of words (or characters)
   in a string will not change the hash.

b: (2, 4)
   Dynamic resizing alone can ensure correctness by resizing the hash so that
   there are no collisions. However, this will have to happen frequently, and
   may have to happen multiple times per insertion (because all elements are
   rehashed). Therefore it does not help performance.
   Collision resolution alone will ensure correctness, however, without
   resizing the hash, the linked-list for any cell k in the table can
   grow without bound. This degrades performance to the time it takes to
   search the list => O(n).

c: 7 Θ(n + mʹ)
   mʹ to allocate the new table, n to copy each individual element and rehash

d: If the table is increased by constant k size each time it is grown, the
   number of insertions required to trigger a table growth does not increase,
   but the amount of work required to increase the table does (Θ(n + mʹ)).
   Therefore it is no longer possible to amortize the cost of growing the table
   over the insert/delete operations because the cost of the table growth grows
   faster than the number of inserts, which is Θ(k) => Θ(1).

2:
a: Many inserts right after creation (ie populated at create), and then mostly
   lookups (because never say never or, in the case of (2), only).

b: A large initial size because of the knowledge that many insertions are coming.
   However, maintaining the table growth at a factor of 2 because that gives
   Θ(1) amortized for insert and delete, so there is no reason to change it.
   A table growth factor of 4 doubles the amount of work required to grow the
   table, but only increases the number of insertions by 50%, so its amortized
   time will be > Θ(1)

4:
d: We don't get the same benefit from only hashing the mth subsequence
   of b as we do for a because b only does lookups and comparisons from the
   multitdict. While both querying and insertion in a dictionary are O(1),
   the constant factors for insertion are quite larger. Also, by making the
   table more space (by only inserting every m-th subsequence of a), the
   constant factor of lookups will be smaller, because the list of subsequences
   for any given hash will be shorter. This effect does not translate to b
   because no table is built from its subsequences.
